[gd_resource type="VisualShader" load_steps=6 format=3 uid="uid://7hjrisye5nl0"]

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_daede"]
size = Vector2(1310.49, 1119.67)
expression = "vec2 uv2 = uv.xy * 2.0 - 1.0;
float r = uv2.x * uv2.x + uv2.y * uv2.y;

float dist_to_center = distance(uv.xy, vec2(0.5, 0.5));
vec4 m = mix(inner_color, outer_color, dist_to_center);
color = m.xyz;
alpha = m.w * float(r <= radius);
"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_x5d7j"]
input_name = "uv"

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_te8t1"]
parameter_name = "inner_color"
default_value_enabled = true
default_value = Color(0, 0, 0, 1)

[sub_resource type="VisualShaderNodeColorParameter" id="VisualShaderNodeColorParameter_7bxlp"]
parameter_name = "outer_color"
default_value_enabled = true

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_w4u8i"]
parameter_name = "radius"
default_value_enabled = true
default_value = 1.0

[resource]
code = "shader_type spatial;
render_mode blend_mix, depth_draw_opaque, cull_back, diffuse_lambert, specular_schlick_ggx;

uniform vec4 inner_color : source_color = vec4(0.000000, 0.000000, 0.000000, 1.000000);
uniform vec4 outer_color : source_color = vec4(1.000000, 1.000000, 1.000000, 1.000000);
uniform float radius = 1;



void fragment() {
// Input:3
	vec2 n_out3p0 = UV;


// ColorParameter:4
	vec4 n_out4p0 = inner_color;


// ColorParameter:5
	vec4 n_out5p0 = outer_color;


// FloatParameter:6
	float n_out6p0 = radius;


	vec3 n_out2p0;
	float n_out2p1;
// Expression:2
	n_out2p0 = vec3(0.0, 0.0, 0.0);
	n_out2p1 = 0.0;
	{
		vec2 uv2 = n_out3p0.xy * 2.0 - 1.0;
		float r = uv2.x * uv2.x + uv2.y * uv2.y;
		
		float dist_to_center = distance(n_out3p0.xy, vec2(0.5, 0.5));
		vec4 m = mix(n_out4p0, n_out5p0, dist_to_center);
		n_out2p0 = m.xyz;
		n_out2p1 = m.w * float(r <= n_out6p0);
		
	}


// Output:0
	ALBEDO = n_out2p0;
	ALPHA = n_out2p1;


}
"
nodes/fragment/2/node = SubResource("VisualShaderNodeExpression_daede")
nodes/fragment/2/position = Vector2(-960, 160)
nodes/fragment/2/size = Vector2(1310.49, 1119.67)
nodes/fragment/2/input_ports = "0,3,uv;1,5,inner_color;2,5,outer_color;3,0,radius;"
nodes/fragment/2/output_ports = "0,4,color;1,0,alpha;"
nodes/fragment/2/expression = "vec2 uv2 = uv.xy * 2.0 - 1.0;
float r = uv2.x * uv2.x + uv2.y * uv2.y;

float dist_to_center = distance(uv.xy, vec2(0.5, 0.5));
vec4 m = mix(inner_color, outer_color, dist_to_center);
color = m.xyz;
alpha = m.w * float(r <= radius);
"
nodes/fragment/3/node = SubResource("VisualShaderNodeInput_x5d7j")
nodes/fragment/3/position = Vector2(-1560, 160)
nodes/fragment/4/node = SubResource("VisualShaderNodeColorParameter_te8t1")
nodes/fragment/4/position = Vector2(-2080, 180)
nodes/fragment/5/node = SubResource("VisualShaderNodeColorParameter_7bxlp")
nodes/fragment/5/position = Vector2(-2080, 560)
nodes/fragment/6/node = SubResource("VisualShaderNodeFloatParameter_w4u8i")
nodes/fragment/6/position = Vector2(-2080, 960)
nodes/fragment/connections = PackedInt32Array(2, 0, 0, 0, 3, 0, 2, 0, 4, 0, 2, 1, 5, 0, 2, 2, 6, 0, 2, 3, 2, 1, 0, 1)
