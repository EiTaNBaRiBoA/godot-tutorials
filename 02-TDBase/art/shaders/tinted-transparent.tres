[gd_resource type="VisualShader" load_steps=11 format=2]

[sub_resource type="VisualShaderNodeInput" id=8]
input_name = "texture"

[sub_resource type="VisualShaderNodeTexture" id=10]
source = 5

[sub_resource type="VisualShaderNodeVectorOp" id=11]

[sub_resource type="VisualShaderNodeScalarUniform" id=12]
uniform_name = "lighten"
hint = 1

[sub_resource type="VisualShaderNodeVectorCompose" id=13]

[sub_resource type="VisualShaderNodeColorUniform" id=3]
uniform_name = "tint"
default_value_enabled = true

[sub_resource type="VisualShaderNodeVectorOp" id=4]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=5]
uniform_name = "transparency"
default_value_enabled = true

[sub_resource type="VisualShaderNodeScalarOp" id=6]
operator = 2

[sub_resource type="VisualShaderNodeScalarFunc" id=7]
function = 31

[resource]
code = "shader_type canvas_item;
render_mode unshaded;

uniform float lighten : hint_range(0, 1);
uniform vec4 tint : hint_color = vec4(1.000000, 1.000000, 1.000000, 1.000000);
uniform float transparency = 0;



void vertex() {
// Output:0

}

void fragment() {
// ScalarUniform:14
	float n_out14p0 = lighten;

// VectorCompose:15
	vec3 n_out15p0 = vec3(n_out14p0, n_out14p0, n_out14p0);

// ColorUniform:4
	vec3 n_out4p0 = tint.rgb;
	float n_out4p1 = tint.a;

// Input:10

// Texture:11
	vec3 n_out11p0;
	float n_out11p1;
	{
		vec4 TEXTURE_tex_read = texture(TEXTURE, UV.xy);
		n_out11p0 = TEXTURE_tex_read.rgb;
		n_out11p1 = TEXTURE_tex_read.a;
	}

// VectorOp:5
	vec3 n_out5p0 = n_out4p0 * n_out11p0;

// VectorOp:13
	vec3 n_out13p0 = n_out15p0 + n_out5p0;

// ScalarUniform:6
	float n_out6p0 = transparency;

// ScalarFunc:8
	float n_out8p0 = 1.0 - n_out6p0;

// ScalarOp:7
	float n_out7p0 = n_out11p1 * n_out8p0;

// Output:0
	COLOR.rgb = n_out13p0;
	COLOR.a = n_out7p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -996, 103.5 )
mode = 1
flags/light_only = false
flags/unshaded = true
nodes/fragment/0/position = Vector2( 1320, 40 )
nodes/fragment/4/node = SubResource( 3 )
nodes/fragment/4/position = Vector2( -800, -220 )
nodes/fragment/5/node = SubResource( 4 )
nodes/fragment/5/position = Vector2( -200, -40 )
nodes/fragment/6/node = SubResource( 5 )
nodes/fragment/6/position = Vector2( -1120, 420 )
nodes/fragment/7/node = SubResource( 6 )
nodes/fragment/7/position = Vector2( -60, 260 )
nodes/fragment/8/node = SubResource( 7 )
nodes/fragment/8/position = Vector2( -560, 420 )
nodes/fragment/10/node = SubResource( 8 )
nodes/fragment/10/position = Vector2( -1340, 120 )
nodes/fragment/11/node = SubResource( 10 )
nodes/fragment/11/position = Vector2( -1020, 120 )
nodes/fragment/13/node = SubResource( 11 )
nodes/fragment/13/position = Vector2( 920, -80 )
nodes/fragment/14/node = SubResource( 12 )
nodes/fragment/14/position = Vector2( 120, -340 )
nodes/fragment/15/node = SubResource( 13 )
nodes/fragment/15/position = Vector2( 700, -320 )
nodes/fragment/connections = PoolIntArray( 6, 0, 8, 0, 8, 0, 7, 1, 10, 0, 11, 2, 11, 1, 7, 0, 7, 0, 0, 1, 4, 0, 5, 0, 11, 0, 5, 1, 5, 0, 13, 1, 13, 0, 0, 0, 14, 0, 15, 0, 14, 0, 15, 1, 14, 0, 15, 2, 15, 0, 13, 0 )
